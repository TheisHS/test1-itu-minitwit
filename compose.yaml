# the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache.
networks:
  main:

services:
  webserver:
    build:
      context: .
      dockerfile: ./src/Dockerfile
    networks:
      - main
    ports:
      - '4000:5000'
    depends_on:
      - prometheus
      - grafana
  
  apiserver:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    volumes:
      - ./logs/:/logs/
    networks:
      - main
    ports:
      - '4001:5001'
    depends_on:
      - prometheus
      - grafana

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - main

  grafana:
    image: grafana/grafana:10.2.4
    ports:
      - "3000:3000"
    networks:
      - main


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    volumes:
      - ./resources/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:9200/_cat/health"]
      interval: 3s
      timeout: 3s
      retries: 10
    ports:
      - 9200:9200

  logstash:
    image: docker.elastic.co/logstash/logstash:7.6.2
    volumes:
      - ./resources/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:6.5.1
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./resources/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs/:/logs/

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/api/status"]
      interval: 3s
      timeout: 3s
      retries: 50
    ports:
      - 5601:5601

# We can look at https://github.com/docker/awesome-compose if we want to integrate other services at some point and manage their deployment
# like MySQL, perhaps.