# This config was automatically generated from your source code
# Stacks detected: artifact:go-executable:,deps:go:src
version: 2.1

jobs:
  run_api_tests:
    docker:
      - image:  cimg/base:2022.09
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
      - run:
          name: Run test script
          command: |
            sh ./run-api-tests.sh
  run_tests:
    docker:
      - image:  cimg/base:2022.09
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
      - run:
          name: Run test script
          command: |
            sh ./run-tests.sh

  build_web:
    docker:
      - image:  cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Set up Docker Buildx
          command: |
            docker buildx create --use
      - run: 
          name: Build and push serverimage
          command: |
            docker build -t "$DOCKER_USERNAME/minitwit-web:latest" -f ./src/Dockerfile .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push "$DOCKER_USERNAME/minitwit-web:latest"

  build_api:
    docker:
      - image:  cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Set up Docker Buildx
          command: |
            docker buildx create --use
      - run:
          name: Build and push apiimage
          command: |
            docker build -t "$DOCKER_USERNAME/minitwit-api:latest" -f ./api/Dockerfile .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push "$DOCKER_USERNAME/minitwit-api:latest"
  
  build_web_tests:
    docker:
      - image:  cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Set up Docker Buildx
          command: |
            docker buildx create --use
      - run:
          name: Build and push apiimage
          command: |
            docker build -t "$DOCKER_USERNAME/minitwit-api:latest" -f ./api/Dockerfile .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push "$DOCKER_USERNAME/minitwit-api:latest"
  
  build_api_tests:
    docker:
      - image:  cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Set up Docker Buildx
          command: |
            docker buildx create --use
      - run:
          name: Build and push apiimage
          command: |
            docker build -t "$DOCKER_USERNAME/minitwit-api:latest" -f ./api/Dockerfile .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push "$DOCKER_USERNAME/minitwit-api:latest"

  deploy:
    docker:
      - image:  cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Configure SSH
          command: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/do_ssh_key
            chmod 600 ~/.ssh/do_ssh_key
      - run:
          name: Deploy to server
          command: |
            ssh $SSH_USER@$SSH_HOST -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no './deploy.sh'

  publish_github_release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete "automatic"

workflows:
  build_and_deploy:
    jobs:
      - run_api_tests:
          filters:
            branches:
              only:
                - main
      - run_tests:
          filters:
            branches:
              only:
                - main
      - build_web:
          requires:
            - run_tests
      - build_api:
          requires:
            - run_api_tests
      - deploy:
          requires:
            - build_web
            - build_api
  test_release:
    jobs:
      - publish_github_release
  release:
    jobs:
      - publish_github_release
    triggers:
      - schedule:
          cron: "0 20 * * 4"
          filters:
            branches:
              only:
                - main