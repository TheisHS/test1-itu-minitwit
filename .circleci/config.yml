# This config was automatically generated from your source code
# Stacks detected: artifact:go-executable:,deps:go:src
orbs:
  docker: circleci/docker@2.5.0
  shellcheck: circleci/shellcheck@3.1.2
version: 2.1

jobs:
  run_api_tests:
    docker:
      - image:  cimg/base:2022.09
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
      - run:
          name: Run test script
          command: |
            sh ./run-api-tests.sh
  run_tests:
    docker:
      - image:  cimg/base:2022.09
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
      - run:
          name: Run test script
          command: |
            sh ./run-tests.sh

  build_web:
    docker:
      - image:  cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Set up Docker Buildx
          command: |
            docker buildx create --use
      - run: 
          name: Build and push serverimage
          command: |
            docker build -t "$DOCKER_USERNAME/minitwit-web:latest" -f ./src/Dockerfile .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push "$DOCKER_USERNAME/minitwit-web:latest"

  build_api:
    docker:
      - image:  cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Set up Docker Buildx
          command: |
            docker buildx create --use
      - run:
          name: Build and push apiimage
          command: |
            docker build -t "$DOCKER_USERNAME/minitwit-api:latest" -f ./api/Dockerfile .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push "$DOCKER_USERNAME/minitwit-api:latest"

  deploy:
    docker:
      - image:  cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Configure SSH
          command: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/do_ssh_key
            chmod 600 ~/.ssh/do_ssh_key
      - run:
          name: Deploy to server
          command: |
            ssh $SSH_USER@$SSH_HOST -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no './deploy.sh'
  
  compile_latex:
    docker:
      - image: schickling/latex:latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: large
    description: |
      Compile tex file into pdf and output it into artifacts.
    parameters:
      file:
        description: File to compile
        type: string
    steps:
      - checkout
      - run:
          command: |
            mkdir -p report/build
            cd report
            pdflatex -output-directory build <<parameters.file>>
          name: Compile .tex file into .pdf
          shell: /bin/bash
      - store_artifacts:
          path: report/build
  push_to_git:
    docker:
      - image: cimg/base:2022.09
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    description: |
      Push artifacts to GitHub
    steps:
      - checkout
      - run:
          name: Install TexLive
          command: |
            echo "Installing pdflatex"
            sudo apt-get install texlive-latex-base
            sudo apt-get install texlive-fonts-recommended
            sudo apt-get install texlive-fonts-extra
            sudo apt-get install texlive-latex-extra
      - run:
          name: Compile .tex file into .pdf
          shell: /bin/bash
          command: |
            mkdir -p report/build
            cd report
            pdflatex -output-directory build <<parameters.file>>
      - run:
          name: Commit to GitHub
          command: |
            echo "Committing to GitHub"
            git config user.email "nako@itu.dk"
            git config user.name "CircleCI Job"
            git add report/build
            git commit --allow-empty -am "Automatic commit from CircleCI [skip ci]"
            git push


workflows:
  lint:
    jobs:
      - docker/hadolint:
          ignore-rules: DL4005,DL3008
          dockerfiles: 'api/Dockerfile:api-tests/Dockerfile:src/Dockerfile:src-tests/Dockerfile'
      - shellcheck/check:
          dir: .
          exclude: SC2148
  build_and_deploy:
    jobs:
      - run_api_tests:
          filters:
            branches:
              only:
                - main
      - run_tests:
          filters:
            branches:
              only:
                - main
      - build_web:
          requires:
            - run_tests
      - build_api:
          requires:
            - run_api_tests
      - deploy:
          requires:
            - build_web
            - build_api
  compile_latex_and_push:
    jobs:
      - push_to_git:
          file: main.tex